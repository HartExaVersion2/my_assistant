'''
Текстовый файл содержит только буквы A, C, D, F, O. Определите длину самой длинной цепочки символов, которая начинается
и заканчивается буквой F, а между двумя последовательными буквами F содержит не более двух букв A и произвольное количество других букв.
'''

# s = open('24.txt').readline().split('F')[1:-1]
# global_max = 0
# local_max = 1
# for i in range(len(s)):
#     if s[i].count('A') <= 2:
#         local_max += len(s[i]) + 1
#         global_max = max(global_max, local_max)
#     else:
#         local_max = 1
# print(global_max)

'''
Назовём маской числа последовательность цифр, в которой также могут встречаться следующие символы:

— символ «?» означает ровно одну произвольную цифру;
— символ «*» означает любую последовательность цифр произвольной длины; в том числе «*» может задавать и пустую последовательность.

Например, маске 123*4?5 соответствуют числа 123405 и 12300405.
Найдите все натуральные числа, не превосходящие 108, для которых выполнены
все условия:

— соответствуют маске 1?4*6?8;
— делятся на 2622 без остатка.

В ответе запишите в первом столбце таблицы все найденные числа в порядке возрастания, справа от каждого числа их частное от деления на 2622.
'''

# from fnmatch import *
#
# for i in range(0, 10 ** 8, 2622):
#     if fnmatch(str(i), '1?4*6?8'):
#         print(i, i // 2622)


'''
Входной файл содержит информацию о плане проведения собраний в конференц-зале. Для каждого собрания известно время 
проведения и длительность собрания. Определите, максимальное количество собраний, которое может быть проведено в 
конференц-зале в течение одного дня. Если одно из собраний заканчивается в ту же минуту, в которую начинается другое 
выступление, то их можно поставить вместе. Также необходимо определить максимальный перерыв между последними собраниями 
при их самом оптимальном размещении. Если способов выбрать последнее собрание несколько, выбрать нужно то, длительность 
которого больше.

В первой строке входного файла находится натуральное число N, (N 1000), обозначающее количество собраний. Каждая из 
следующих N строк содержит два натуральных числа: указанное в заявке время проведения (в минутах от начала суток, не 
превышает 1300) и длительность (в минутах, не превышает 1000) собрания.
Запишите в ответ два числа: максимальное количество собраний, которое можно провести и максимальный перерыв между 
последними собраниями при их самом оптимальном размещении.

5
10 140
100 10
120 10
131 19
131 49

Ответ к примеру: 3 1.
'''

# file = open('26_59776.txt')
# count_values = int(file.readline())
# list_date_meetings = []
# for line in file:
#     start, dlit = map(int, line.split())
#     list_date_meetings.append([start + dlit, start])
# list_date_meetings.sort()
# count = []
# end_meeting = 0
# for i in range(count_values):
#     if end_meeting == 0:
#         end_meeting = list_date_meetings[i][0]
#         count.append(list_date_meetings[i])
#         last = i
#     elif end_meeting <= list_date_meetings[i][1]:
#         end_meeting = list_date_meetings[i][0]
#         count.append(list_date_meetings[i])
#         last = i
# del count[-1]
# end_meeting = count[-1][0]
# for i in range(last, count_values):
#     if end_meeting == 0:
#         end_meeting = list_date_meetings[i][0]
#         count.append(list_date_meetings[i])
#     elif end_meeting <= list_date_meetings[i][1]:
#         count.append(list_date_meetings[i])
# print(len(count), count[-1][1] - count[-2][0])


'''
На вход программы поступает последовательность из N натуральных чисел. Рассматриваются все пары различных элементов 
последовательности, у которых различные остатки от деления на d=160 и хотя бы одно из чисел делится на p=7. Среди таких 
пар, необходимо найти и вывести пару с максимальной суммой элементов.

В первой строке входных данных задаётся количество чисел N (1 ≤ N ≤ 1000). В каждой из последующих N строк записано одно 
натуральное число, не превышающее 10000. В качестве результата программа должна напечатать элементы искомой пары. Если 
среди найденных пар максимальную сумму имеют несколько, то можно напечатать любую из них. Если таких пар нет, то вывести 
два нуля.

Пример организации исходных данных во входном файле:
4
168
7
320
328

Пример выходных данных для приведённого выше примера входных данных:
168 320
В ответе укажите четыре числа: сначала значение искомой пары для файла А (два числа через пробел по возрастанию), затем 
для файла B (два числа через пробел по возрастанию).
'''

file = open("28129_B.txt")
line = file.readlines()
m71 = 0
m72 = 0
m1 = 0
m2 = 0
max1 = 0
max2 = 0
for i in range(len(line)):
    x = int(line[i])
    if x % 7 == 0 and x % 160 == m71 % 160 and x > m71:
        m71 = x
    elif x % 7 == 0 and x % 160 != m71 % 160 and x > m71:
        m72 = m71
        m71 = x
    elif (x % 7 == 0) and (x % 160 != m71 % 160) and (x > m72):
        m72 = x
    elif x % 7 != 0 and x % 160 == m1 % 160 and x > m1:
        m1 = x
    elif x % 7 != 0 and x % 160 != m1 % 160 and x > m1:
        m2 = m1
        m1 = x
    elif x % 7 != 0 and x % 160 != m1 % 160 and x > m2:
        m2 = x
if m71 == 0 and m72 == 0:
    print(0, 0)
elif (m72 == 0) and (m2 == 0) and (m71 % 160 == m1 % 160):
    print(0, 0)
else:
    if (m71 + m72) > (max1 + max2):
        max1 = m71
        max2 = m72
    if ((m71 + m1) > (max1 + max2)) and (m71 % 160 != m1 % 160):
        max1 = m71
        max2 = m1
    if ((m71+m2)>(max1+max2)) and (m71 % 160 != m2 % 160):
        max1 = m71
        max2 = m2
    if (((m72 + m1) > (max1 + max2)) and ((m72 % 160) != (m1 % 160))):
        max1 = m72
        max2 = m1
    print(max1, max2)


file = open('28129_B.txt')
line = int(file.readline()); k7 = 0; res = []
for list_date_meetings in range(line):
    x = int(file.readline())
    if x % 7 == 0:
        k7 = max(k7, x)
    res += [x]
print(k7, max(res))